Xi = ns(dr1$Lat, knots=knots, intercept=FALSE, Boundary.knots=latRange)
par(mfrow=c(1,1))
matplot(dr1$Lat, Xi, main="Spline Basis", xlab="Latitude")
Xi = ns(dr1$Lat, knots=knots, intercept=TRUE, Boundary.knots=latRange)
matplot(dr1$Lat, Xi, main="Spline Basis", xlab="Latitude")
require(graphics)
splineDesign(knots = 1:10, x = 4:7)
splineDesign(knots = 1:10, x = 4:7, deriv = 1)
## visualize band structure
Matrix::drop0(zapsmall(6*splineDesign(knots = 1:40, x = 4:37, sparse = TRUE)))
knots <- c(1,1.8,3:5,6.5,7,8.1,9.2,10)  # 10 => 10-4 = 6 Basis splines
x <- seq(min(knots)-1, max(knots)+1, length.out = 501)
bb <- splineDesign(knots, x = x, outer.ok = TRUE)
plot(range(x), c(0,1), type = "n", xlab = "x", ylab = "",
main =  "B-splines - sum to 1 inside inner knots")
mtext(expression(B[j](x) *"  and "* sum(B[j](x), j == 1, 6)), adj = 0)
abline(v = knots, lty = 3, col = "light gray")
abline(v = knots[c(4,length(knots)-3)], lty = 3, col = "gray10")
lines(x, rowSums(bb), col = "gray", lwd = 2)
matlines(x, bb, ylim = c(0,1), lty = 1)
dim(bb)
56*25
56*24
knots = seq(40, 50, l=nKnots+2)[2:(nKnots+1)]
Xi = ns(lats, knots=knots, intercept=TRUE, Boundary.knots=latRange)
matplot(dr1$Lat, Xi, main="Spline Basis", xlab="Latitude")
matplot(lats, Xi, main="Spline Basis", xlab="Latitude")
Xi = ns(lats, knots=knots, intercept=FALSE, Boundary.knots=latRange)
matplot(lats, Xi, main="Spline Basis", xlab="Latitude")
Xi = ns(dr1$Lat, knots=knots, intercept=FALSE, Boundary.knots=latRange)
mod = lm(dr1$subsidence ~ Xi)
summary(mod)
plot(mod)
preds = predict(mod, lats)
?lm
preds = coef(mod)[1] + Xi %*% coef(mod)[2:length(coef(mod))]
plot(dr1$Lat, dr1$subsidence)
lines(lats, preds)
length(preds)
Xi = ns(lats, knots=knots, intercept=FALSE, Boundary.knots=latRange)
preds = coef(mod)[1] + Xi %*% coef(mod)[2:length(coef(mod))]
lines(lats, preds)
nKnots=2
knots = seq(40, 50, l=nKnots+2)[2:(nKnots+1)]
Xi = ns(dr1$Lat, knots=knots, intercept=FALSE, Boundary.knots=latRange)
mod = lm(dr1$subsidence ~ Xi)
Xi = ns(lats, knots=knots, intercept=FALSE, Boundary.knots=latRange)
preds = coef(mod)[1] + Xi %*% coef(mod)[2:length(coef(mod))]
plot(dr1$Lat, dr1$subsidence)
lines(lats, preds)
Xi = ns(dr1$Lat, knots=knots, intercept=FALSE, Boundary.knots=latRange)
matplot(Xi)
Xi = ns(lats, knots=knots, intercept=FALSE, Boundary.knots=latRange)
matplot(lats, Xi, main="Spline Basis", xlab="Latitude")
summary(mod)
df=3
Xi = bs(dr1$Lat, df=df, intercept=FALSE, Boundary.knots=latRange)
mod = lm(dr1$subsidence ~ Xi)
Xi = ns(lats, df=df, intercept=FALSE, Boundary.knots=latRange)
preds = coef(mod)[1] + Xi %*% coef(mod)[2:length(coef(mod))]
plot(dr1$Lat, dr1$subsidence)
lines(lats, preds)
matPlot(Xi)
matplot(Xi)
Xi = bs(dr1$Lat, df=df, intercept=FALSE, Boundary.knots=latRange)
mod = lm(dr1$subsidence ~ Xi)
Xi = ns(lats, df=df, intercept=FALSE, Boundary.knots=latRange)
preds = coef(mod)[1] + Xi %*% coef(mod)[2:length(coef(mod))]
plot(dr1$Lat, dr1$subsidence)
lines(lats, preds)
summary(mod)
Xi = bs(lats, df=df, intercept=FALSE, Boundary.knots=latRange)
preds = coef(mod)[1] + Xi %*% coef(mod)[2:length(coef(mod))]
plot(dr1$Lat, dr1$subsidence)
lines(lats, preds)
df=2
Xi = bs(dr1$Lat, df=df, intercept=FALSE, Boundary.knots=latRange)
mod = lm(dr1$subsidence ~ Xi)
latRange = c(40, 50)
nKnots=2
knots = seq(40, 50, l=nKnots+2)[2:(nKnots+1)]
Xi = ns(dr1$Lat, knots=knots, intercept=FALSE, Boundary.knots=latRange)
mod = lm(dr1$subsidence ~ Xi)
Xi = ns(lats, knots=knots, intercept=FALSE, Boundary.knots=latRange)
preds = coef(mod)[1] + Xi %*% coef(mod)[2:length(coef(mod))]
plot(dr1$Lat, dr1$subsidence)
lines(lats, preds)
nKnots=1
knots = seq(40, 50, l=nKnots+2)[2:(nKnots+1)]
Xi = ns(dr1$Lat, knots=knots, intercept=FALSE, Boundary.knots=latRange)
mod = lm(dr1$subsidence ~ Xi)
Xi = ns(lats, knots=knots, intercept=FALSE, Boundary.knots=latRange)
preds = coef(mod)[1] + Xi %*% coef(mod)[2:length(coef(mod))]
plot(dr1$Lat, dr1$subsidence)
lines(lats, preds)
nKnots=0
knots = seq(40, 50, l=nKnots+2)[2:(nKnots+1)]
Xi = ns(dr1$Lat, knots=knots, intercept=FALSE, Boundary.knots=latRange)
df=3
Xi = bs(dr1$Lat, df=df, intercept=FALSE, Boundary.knots=latRange)
mod = lm(dr1$subsidence ~ Xi)
Xi = bs(lats, df=df, intercept=FALSE, Boundary.knots=latRange)
preds = coef(mod)[1] + Xi %*% coef(mod)[2:length(coef(mod))]
plot(dr1$Lat, dr1$subsidence)
lines(lats, preds)
nKnots=2
knots = seq(40, 50, l=nKnots+2)[2:(nKnots+1)]
Xi = ns(dr1$Lat, knots=knots, intercept=FALSE, Boundary.knots=latRange)
mod = lm(dr1$subsidence ~ Xi)
Xi = ns(lats, knots=knots, intercept=FALSE, Boundary.knots=latRange)
preds = coef(mod)[1] + Xi %*% coef(mod)[2:length(coef(mod))]
plot(dr1$Lat, dr1$subsidence)
lines(lats, preds)
knots
nKnots=3
knots = seq(40, 50, l=nKnots+2)[2:(nKnots+1)]
Xi = ns(dr1$Lat, knots=knots, intercept=FALSE, Boundary.knots=latRange)
mod = lm(dr1$subsidence ~ Xi)
Xi = ns(lats, knots=knots, intercept=FALSE, Boundary.knots=latRange)
preds = coef(mod)[1] + Xi %*% coef(mod)[2:length(coef(mod))]
plot(dr1$Lat, dr1$subsidence)
lines(lats, preds)
nKnots=4
knots = seq(40, 50, l=nKnots+2)[2:(nKnots+1)]
Xi = ns(dr1$Lat, knots=knots, intercept=FALSE, Boundary.knots=latRange)
mod = lm(dr1$subsidence ~ Xi)
Xi = ns(lats, knots=knots, intercept=FALSE, Boundary.knots=latRange)
preds = coef(mod)[1] + Xi %*% coef(mod)[2:length(coef(mod))]
plot(dr1$Lat, dr1$subsidence)
lines(lats, preds)
nKnots=5
knots = seq(40, 50, l=nKnots+2)[2:(nKnots+1)]
Xi = ns(dr1$Lat, knots=knots, intercept=FALSE, Boundary.knots=latRange)
mod = lm(dr1$subsidence ~ Xi)
Xi = ns(lats, knots=knots, intercept=FALSE, Boundary.knots=latRange)
preds = coef(mod)[1] + Xi %*% coef(mod)[2:length(coef(mod))]
plot(dr1$Lat, dr1$subsidence)
lines(lats, preds)
df=3
Xi = bs(dr1$Lat, df=df, intercept=FALSE, Boundary.knots=latRange)
mod = lm(dr1$subsidence ~ Xi)
Xi = bs(lats, df=df, intercept=FALSE, Boundary.knots=latRange)
preds = coef(mod)[1] + Xi %*% coef(mod)[2:length(coef(mod))]
plot(dr1$Lat, dr1$subsidence)
lines(lats, preds)
df=4
Xi = bs(dr1$Lat, df=df, intercept=FALSE, Boundary.knots=latRange)
mod = lm(dr1$subsidence ~ Xi)
Xi = bs(lats, df=df, intercept=FALSE, Boundary.knots=latRange)
preds = coef(mod)[1] + Xi %*% coef(mod)[2:length(coef(mod))]
plot(dr1$Lat, dr1$subsidence)
lines(lats, preds)
df=6
Xi = bs(dr1$Lat, df=df, intercept=FALSE, Boundary.knots=latRange)
mod = lm(dr1$subsidence ~ Xi)
Xi = bs(lats, df=df, intercept=FALSE, Boundary.knots=latRange)
preds = coef(mod)[1] + Xi %*% coef(mod)[2:length(coef(mod))]
plot(dr1$Lat, dr1$subsidence)
lines(lats, preds)
nKnots=3
knots = seq(40, 50, l=nKnots+2)[2:(nKnots+1)]
Xi = ns(dr1$Lat, knots=knots, intercept=FALSE, Boundary.knots=latRange)
mod = lm(dr1$subsidence ~ Xi)
Xi = ns(lats, knots=knots, intercept=FALSE, Boundary.knots=latRange)
preds = coef(mod)[1] + Xi %*% coef(mod)[2:length(coef(mod))]
plot(dr1$Lat, dr1$subsidence)
lines(lats, preds)
df=3
Xi = bs(dr1$Lat, df=df, intercept=FALSE, Boundary.knots=latRange)
mod = lm(dr1$subsidence ~ Xi)
Xi = bs(lats, df=df, intercept=FALSE, Boundary.knots=latRange)
preds = coef(mod)[1] + Xi %*% coef(mod)[2:length(coef(mod))]
plot(dr1$Lat, dr1$subsidence)
lines(lats, preds)
df=4
Xi = bs(dr1$Lat, df=df, intercept=FALSE, Boundary.knots=latRange)
mod = lm(dr1$subsidence ~ Xi)
Xi = bs(lats, df=df, intercept=FALSE, Boundary.knots=latRange)
preds = coef(mod)[1] + Xi %*% coef(mod)[2:length(coef(mod))]
plot(dr1$Lat, dr1$subsidence)
lines(lats, preds)
summary(mod)
nKnots
Xi = bs(dr1$Lat, df=nKnots, intercept=FALSE, Boundary.knots=latRange)
dim(Xi)
head(Xi)
coef(mod)
sum(coef(mod)[2:5])
nKnots=3
knots = seq(40, 50, l=nKnots+2)[2:(nKnots+1)]
Xi = ns(dr1$Lat, knots=knots, intercept=FALSE, Boundary.knots=latRange)
mod = lm(dr1$subsidence ~ Xi)
Xi = ns(lats, knots=knots, intercept=FALSE, Boundary.knots=latRange)
preds = coef(mod)[1] + Xi %*% coef(mod)[2:length(coef(mod))]
plot(dr1$Lat, dr1$subsidence)
lines(lats, preds)
head(Xi)
matplot(Xi)
nKnots=2
knots = seq(40, 50, l=nKnots+2)[2:(nKnots+1)]
Xi = ns(dr1$Lat, knots=knots, intercept=TRUE, Boundary.knots=latRange)
mod = lm(dr1$subsidence ~ Xi)
Xi = ns(lats, knots=knots, intercept=TRUE, Boundary.knots=latRange)
preds = coef(mod)[1] + Xi %*% coef(mod)[2:length(coef(mod))]
plot(dr1$Lat, dr1$subsidence)
lines(lats, preds)
preds = Xi %*% coef(mod)
plot(dr1$Lat, dr1$subsidence)
mod = lm(dr1$subsidence ~ Xi - 1)
nKnots=2
knots = seq(40, 50, l=nKnots+2)[2:(nKnots+1)]
Xi = ns(dr1$Lat, knots=knots, intercept=TRUE, Boundary.knots=latRange)
mod = lm(dr1$subsidence ~ Xi - 1)
Xi = ns(lats, knots=knots, intercept=TRUE, Boundary.knots=latRange)
preds = Xi %*% coef(mod)
plot(dr1$Lat, dr1$subsidence)
lines(lats, preds)
dim(Xi)
head(Xi)
nKnots=2
knots = seq(40, 50, l=nKnots+2)[2:(nKnots+1)]
Xi = ns(dr1$Lat, knots=knots, intercept=FALSE, Boundary.knots=latRange)
Xi = cbind(rep(1, nrow(Xi)))
mod = lm(dr1$subsidence ~ Xi - 1)
Xi = ns(lats, knots=knots, intercept=FALSE, Boundary.knots=latRange)
Xi = cbind(rep(1, nrow(Xi)))
preds = Xi %*% coef(mod)
plot(dr1$Lat, dr1$subsidence)
lines(lats, preds)
Xi = ns(dr1$Lat, knots=knots, intercept=FALSE, Boundary.knots=latRange)
Xi = cbind(rep(1, nrow(Xi)), Xi)
mod = lm(dr1$subsidence ~ Xi - 1)
Xi = ns(lats, knots=knots, intercept=FALSE, Boundary.knots=latRange)
Xi = cbind(rep(1, nrow(Xi)), Xi)
preds = Xi %*% coef(mod)
plot(dr1$Lat, dr1$subsidence)
lines(lats, preds)
nKnots=3
knots = seq(40, 50, l=nKnots+2)[2:(nKnots+1)]
Xi = ns(dr1$Lat, knots=knots, intercept=FALSE, Boundary.knots=latRange)
Xi = cbind(rep(1, nrow(Xi)), Xi)
mod = lm(dr1$subsidence ~ Xi - 1)
Xi = ns(lats, knots=knots, intercept=FALSE, Boundary.knots=latRange)
Xi = cbind(rep(1, nrow(Xi)), Xi)
preds = Xi %*% coef(mod)
plot(dr1$Lat, dr1$subsidence)
lines(lats, preds)
dim(Xi)
knots = seq(40, 50, l=nKnots+2)[2:(nKnots+1)]
Xi = ns(dr1$Lat, knots=knots, intercept=TRUE, Boundary.knots=latRange)
mod = lm(dr1$subsidence ~ Xi - 1)
Xi = ns(lats, knots=knots, intercept=TRUE, Boundary.knots=latRange)
preds = Xi %*% coef(mod)
plot(dr1$Lat, dr1$subsidence)
lines(lats, preds)
dim(Xi)
Xi = bs(dr1$Lat, df=nKnots, intercept=FALSE, Boundary.knots=latRange)
Xi = cbind(rep(1, nrow(Xi)), Xi)
mod = lm(dr1$subsidence ~ Xi - 1)
preds = Xi %*% coef(mod)
nx = 300
ny=  900
lonGrid = seq(lonRange[1], lonRange[2], l=nx)
latGrid = seq(latRange[1], latRange[2], l=ny)
G = okadaAll(csz, lonGrid, latGrid, cbind(dr1$Lon, dr1$Lat), slip=1, poisson=0.25)
test = getInitialSplineEsts(MLEs[1], MLEs[3], G)
debugSource('~/git/M9/fitModel.R')
test = getInitialSplineEsts(MLEs[1], MLEs[3], G)
dim(G)
length(expectZeta)
dim(Xi)
debugSource('~/git/M9/fitModel.R')
test = getInitialSplineEsts(MLEs[1], MLEs[3], G)
test
debugSource('~/git/M9/fitModel.R')
test = getInitialSplineEsts(MLEs[1], MLEs[3], G)
plot(csz$latitude, test$tvec)
test$betaHat
debugSource('~/git/M9/fitModel.R')
test = getInitialSplineEsts(MLEs[1], MLEs[3], G)
plot(csz$latitude, test$tvec)
?family
?gaussian
debugSource('~/git/M9/fitModel.R')
test = getInitialSplineEsts(MLEs[2], MLEs[3], MLEs[1], G)
debugSource('~/git/M9/fitModel.R')
test = getInitialSplineEsts(MLEs[2], MLEs[3], MLEs[1], G)
debugSource('~/git/M9/fitModel.R')
test = getInitialSplineEsts(MLEs[2], MLEs[3], MLEs[1], G)
plot(test$lats, test$lambdaVecLat)
debugSource('~/git/M9/fitModel.R')
test = getInitialSplineEsts(MLEs[2], MLEs[3], MLEs[1], G)
debugSource('~/git/M9/fitModel.R')
test = getInitialSplineEsts(MLEs[2], MLEs[3], MLEs[1], G)
plot(test$lats, test$lambdaVecLat)
plotFault(csz, taper(csz$depth, lambdas=test$lambdaVecCSZ))
plotFault(csz, taper(csz$depth, lambda=test$lambdaVecCSZ))
plotFault(csz, taper(csz$depth, lambda=test$lambdaVecCSZ), legend.mar = 5)
plotFault(csz, taper(csz$depth, lambda=test$lambdaVecCSZ), legend.mar = 10)
plotFault(csz, taper(csz$depth, lambda=test$lambdaVecCSZ), legend.mar = 20)
plotFault(csz, taper(csz$depth, lambda=test$lambdaVecCSZ), legend.mar = 15)
plot.new()
dev.off()
plot.new()
plot(1:4)
plotFault(csz, taper(csz$depth, lambda=test$lambdaVecCSZ), legend.mar = 15)
dev.off()
plot.new()
plot(1:L4)
plot(1:4)
test$betaHat
plotFault(csz, taper(csz$depth, lambda=test$lambdaVecCSZ), legend.mar = 10)
plotFault(csz, csz$latitude, legend.mar = 10)
plotFault(csz, csz$depth, legend.mar = 10)
ds = seq(0, 1, l=100)
plot(ds, taper(ds, lambda=1, dStar = 1), type="l")
plot(ds, taper(ds, lambda=2, dStar = 1), type="l")
plot(ds, taper(ds, lambda=3, dStar = 1), type="l")
plot(ds, taper(ds, lambda=1, dStar = 1), type="l")
plot(ds, taper(ds, lambda=0.5, dStar = 1), type="l")
plot(ds, taper(ds, lambda=0.25, dStar = 1), type="l")
plot(ds, taper(ds, lambda=0.05, dStar = 1), type="l")
min(test$lambdaVecLat)
ans = 1 - (1 - exp(-scaledD))/(1 - exp(-lambda^alpha))
source('~/git/M9/taper.R')
debugSource('~/git/M9/fitModel.R')
testNoNorm = getInitialSplineEsts(MLEs[2], MLEs[3], MLEs[1], G, normalizeTaper = FALSE)
plotFault(csz, taper(csz$depth, lambda=test$lambdaVecCSZ), legend.mar = 10)
plotFault(csz, taper(csz$depth, lambda=testNoNorm$lambdaVecCSZ, normalize=FALSE), legend.mar = 10)
plot(ds, taper(ds, alpha=1), type="l")
plot(ds, taper(ds, alpha=1, dstar=1), type="l")
plot(ds, taper(ds, alpha=1, dStar=1), type="l")
plot(ds, taper(ds, alpha=2, dStar=1), type="l")
plot(ds, taper(ds, alpha=3, dStar=1), type="l")
source('~/git/M9/taper.R')
plot(ds, taper(ds, alpha=3, dStar=1), type="l")
plot(ds, taper(ds, alpha=2, dStar=1), type="l")
plot(ds, taper(ds, alpha=5, dStar=1), type="l")
plot(ds, taper(ds, alpha=1/5, dStar=1), type="l")
plot(ds, taper(ds, alpha=5, dStar=1), type="l")
plot(ds, taper(ds, alpha=5, lambda=0.01, dStar=1), type="l")
plot(ds, taper(ds, alpha=5, lambda=0.0001, dStar=1), type="l")
plot(ds, taper(ds, alpha=5, lambda=0.001, dStar=1), type="l")
plot(ds, taper(ds, alpha=2, lambda=0.001, dStar=1), type="l")
plot(ds, taper(ds, alpha=2, lambda=0.000001, dStar=1), type="l")
debugSource('~/git/M9/fitModel.R')
testStar = getInitialSplineEsts(MLEs[2], MLEs[3], MLEs[1], G, dStar=24000)
plotFault(csz, taper(csz$depth, lambda=test$lambdaVecCSZ), legend.mar = 10)
plotFault(csz, taper(csz$depth, lambda=testNoNorm$lambdaVecCSZ, normalize=FALSE), legend.mar = 10)
plotFault(csz, taper(csz$depth, lambda=testStar$lambdaVecCSZ, dStar=24000), legend.mar=10)
testStar = getInitialSplineEsts(MLEs[2], MLEs[3], MLEs[1], G, dStar = 26000)
plotFault(csz, taper(csz$depth, lambda=testStar$lambdaVecCSZ, dStar=26000), legend.mar=10)
debugSource('~/git/M9/fitModel.R')
debugSource('~/git/M9/fitModel.R')
debugSource('~/git/M9/fitModel.R')
debugSource('~/git/M9/fitModel.R')
dStar = 26000
splineInit = getInitialSplineEsts(MLEs[2], MLEs[3], MLEs[1], G, dStar=dStar)
initParams = c(MLEs[2:3], splineInit)
initParams
initParams = c(MLEs[2:3], splineInit$betaHat)
initParams
testFit = doFitSpline(initParams=initParams, dStar=dStar, useMVNApprox = TRUE)
recover()
params
debugSource('~/git/M9/fitModel.R')
testFit = doFitSpline(initParams=initParams, dStar=dStar, useMVNApprox = TRUE)
debugSource('~/git/M9/fitModel.R')
splinePar = testFit$splineParMLE
tvec = getTaperSpline(splinePar, nKnots=nKnots, dStar=dStar)
length(splinePar)
debugSource('~/git/M9/fitModel.R')
testFit$MLEs
debugSource('~/git/M9/fitModel.R')
testFit = doFitSpline(initParams=initParams, dStar=dStar, useMVNApprox = TRUE)
debugSource('~/git/M9/fitModel.R')
testFit = doFitSpline(initParams=initParams, dStar=dStar, useMVNApprox = TRUE)
initParams
recover()
recover()
splinePar
dim(Xi)
nKnots
debugSource('~/git/M9/fitModel.R')
testFit = doFitSpline(initParams=initParams, dStar=dStar, useMVNApprox = TRUE)
splinePar = testFit$splineParMLE
splinePar
tvec = getTaperSpline(splinePar, nKnots=nKnots, dStar=dStar)
nKnots=4
tvec = getTaperSpline(splinePar, nKnots=nKnots, dStar=dStar)
plotFault(csz, tvec, varRange=c(0, 1))
testFit$MLEs
MLEs
map("world", "Canada", add=TRUE)
US(add=TRUE)
splineFit = testFit
save(splineFit, file="splineFit.RData")
initParams
debugSource('~/git/M9/fitModel.R')
splineFit = doFitSpline(initParams=initParams, dStar=dStar, useMVNApprox = TRUE)
tvec = getTaperSpline(splinePar, nKnots=nKnots, dStar=dStar)
plotFault(csz, tvec, varRange=c(0, 1))
save(splineFit, file="splineFit.RData")
splineFit$MLEs
initParams
testVec = getTaperSpline(initParams[3:7], dStar=dStar)
plotFault(csz, testVec, varRange=c(0,1))
params = splineFit$MLEs
muZeta = params[2]
sigmaZeta = params[3]
lambda0 = params[4]
muXi = params[5]
splineParams = params[6:10]
nx = 300
ny=  900
lonGrid = seq(lonRange[1], lonRange[2], l=nx)
latGrid = seq(latRange[1], latRange[2], l=ny)
G = okadaAll(csz, lonGrid, latGrid, cbind(dr1$Lon, dr1$Lat), slip=1, poisson=0.25)
debugSource('~/git/M9/predictions.R')
source('~/git/M9/exploratoryAnalysisFuns.R')
splinePar = splineFit$splineParMLE
nKnots=4
dStar=26000
tvec = getTaperSpline(splinePar, nKnots=nKnots, dStar=dStar)
comparePredsToSubs(params, G=G, plotNameRoot="Spline", savePlots=FALSE, tvec=tvec)
params
debugSource('~/git/M9/predictions.R')
comparePredsToSubs(params, G=G, plotNameRoot="Spline", savePlots=FALSE, tvec=tvec)
comparePredsToSubs(params, G=G, plotNameRoot="Spline", savePlots=FALSE, tvec=tvec, nsim=1000)
source('~/git/M9/exploratoryAnalysisFuns.R')
comparePredsToSubs(params, G=G, plotNameRoot="Spline", savePlots=FALSE, tvec=tvec, nsim=1000)
comparePredsToGPS(params)
reals = preds(params, nsim=4, fault=csz, tvec=tvec)
debugSource('~/git/M9/predictions.R')
reals = preds(params, nsim=4, fault=csz, tvec=tvec)
reals = reals$slipSims
par(mfrow=c(2,2))
for(i in 1:4) {
mag=getMomentFromSlip(reals[,i])
plotFault(csz, reals[,i],
main=paste0("Sample magnitude ", round(mag, 2), " coseismic slips (m)"))
map("world", "Canada", add=TRUE)
US(add=TRUE)
}
reals = preds(params, nsim=4, fault=csz, tvec=tvec)
reals = reals$slipSims
par(mfrow=c(2,2))
for(i in 1:4) {
mag=getMomentFromSlip(reals[,i])
plotFault(csz, reals[,i],
main=paste0("Sample magnitude ", round(mag, 2), " coseismic slips (m)"))
map("world", "Canada", add=TRUE)
US(add=TRUE)
}
source('~/git/M9/presPlotter.R')
reals = preds(params, nsim=4, fault=csz, tvec=tvec)
reals = reals$slipSims
par(mfrow=c(2,2))
for(i in 1:4) {
mag=getMomentFromSlip(reals[,i])
plotFault(csz, reals[,i], logScale = TRUE,
main=paste0("Sample magnitude ", round(mag, 2), " coseismic slips (m)"))
map("world", "Canada", add=TRUE)
US(add=TRUE)
}
source('~/git/M9/presPlotter.R')
reals = preds(params, nsim=4, fault=csz, tvec=tvec)
reals = reals$slipSims
par(mfrow=c(2,2))
varRange=c(.1, max(reals))
for(i in 1:4) {
mag=getMomentFromSlip(reals[,i])
plotFault(csz, reals[,i], logScale = TRUE, varRange=varRange,
main=paste0("Sample magnitude ", round(mag, 2), " coseismic slips (m)"))
map("world", "Canada", add=TRUE)
US(add=TRUE)
}
source('~/git/M9/exploratoryAnalysisFuns.R')
comparePredsToSubs(params, G=G, plotNameRoot="", savePlots=FALSE, tvec=tvec, nsim=1000, fileNameRoot = "spline")
recover()
sum(is.na(subSims))
sum(!is.na(subSims))
comparePredsToSubs(params, G=G, plotNameRoot="", savePlots=FALSE, tvec=tvec, nsim=1000, fileNameRoot = "spline")
image(subSims)
dim(subSims)
image(is.na(subSims))
image(matrix(1:9, nrow=3))
recover()
min(which(is.na(subSims)))
subSims[372,1:5]
sum(is.na(G))
G = okadaAll(csz, lonGrid, latGrid, cbind(dr1$Lon, dr1$Lat), slip=1, poisson=0.25)
plot(1:4)
reals = preds(params, nsim=4, fault=csz, tvec=tvec)
reals = reals$slipSims
par(mfrow=c(2,2))
varRange=c(.1, max(reals))
for(i in 1:4) {
mag=getMomentFromSlip(reals[,i])
plotFault(csz, reals[,i], logScale = TRUE, varRange=varRange,
main=paste0("Sample magnitude ", round(mag, 2), " coseismic slip (m)"))
map("world", "Canada", add=TRUE)
US(add=TRUE)
}
comparePredsToSubs(params, G=G, plotNameRoot="", savePlots=FALSE, tvec=tvec, nsim=1000, fileNameRoot = "spline")
sum(is.na(G))
nx = 300
ny=  900
lonGrid = seq(lonRange[1], lonRange[2], l=nx)
latGrid = seq(latRange[1], latRange[2], l=ny)
G = okadaAll(csz, lonGrid, latGrid, cbind(dr1$Lon, dr1$Lat), slip=1, poisson=0.25)
sum(is.na(G))
