#part e.
#calculate standard errors
lErr = apply(lb, 2, sd)
LErr = apply(Lb, 2, sd)
#make small amount of error to make sure error bars are plotted
if(lErr[1] == 0)
lErr[1] = .0001
print(max(rbind(L+LErr, l+lErr, Vk)))
maxPlotVal = .2
errBarWidths = 0.05
plot(K, L, pch=20, col="purple", main="Relationship between L, l, and V",
ylim=c(0, maxPlotVal), ylab="L,l,V")
points(K, l, pch=20, col="red")
points(K, Vk, pch=20, col="blue")
legend("topright", c("L", "l", "V"), pch=20,
col=c("purple", "red", "blue"))
arrows(K, L, K, L + LErr, code=2, angle=90, length=errBarWidths)
arrows(K, L, K, L - LErr, code=2, angle=90, length=errBarWidths)
arrows(K, l, K, l + lErr, code=2, angle=90, length=errBarWidths)
arrows(K, l, K, l - lErr, code=2, angle=90, length=errBarWidths)
maxPlotVal = .15
errBarWidths = 0.05
plot(K, L, pch=20, col="purple", main="Relationship between L, l, and V",
ylim=c(0, maxPlotVal), ylab="L,l,V")
points(K, l, pch=20, col="red")
points(K, Vk, pch=20, col="blue")
legend("topright", c("L", "l", "V"), pch=20,
col=c("purple", "red", "blue"))
arrows(K, L, K, L + LErr, code=2, angle=90, length=errBarWidths)
arrows(K, L, K, L - LErr, code=2, angle=90, length=errBarWidths)
arrows(K, l, K, l + lErr, code=2, angle=90, length=errBarWidths)
arrows(K, l, K, l - lErr, code=2, angle=90, length=errBarWidths)
?outer
Xtest = matrix(rnorm(10), ncol=2)
Ytest = matrix(rnorm(10), ncol=2)
Xtest
dfun = function(x, y) {
v = x - y
v %*% v
}
outer(Xtest, Ytest, fun)
outer(Xtest, Ytest, dfun)
test = x[1,]
test = Xtest[1,]
test %*% test
yhatMat[1,]
dim(yhatMat)
pik
dim(pik)
length(pik)
dim(pik[1])
dim(pik[[1]])
length(pik[[1]])
mean(pik[[1]])
mean(pik[[2]])
mean(pik[[5]])
mean(pik[[11]])
Vk
sum(pik[[1]]*(1 - pi[[1]]))
sum(pik[[1]]*(1 - pi[[1]]))/Ntilde
pik[[1]][1:5]
1-pik[[1]][1:5]
dim(yhatMat)
Ntilde
sum(pik[[1]] > 1)
sum(pik[[1]]*(1 - pi[[1]]))
sum(pik[[1]]*(1 - pik[[1]]))
sum(pik[[1]]*(1 - pik[[1]]))/Ntilde
pik[[1]][1:5]
hist(pik[[1]])
hist(pik[[1]], nbreaks=20, col="blue")
hist(pik[[1]], nbreaks=20, col="skyblue")
hist(pik[[1]], breaks=20, col="skyblue")
plot(x1s[,1], x1s[,2], pch=".", col="blue",
xlim=c(-5, 5), ylim=c(-3, 3), cex=2)
points(x2s[,1], x2s[,2], pch=".", col="red", cex=2)
plot(D[1:(Ntilde/2),1], D[1:(Ntilde/2),2], pch=".", col="blue",
xlim=c(-5, 5), ylim=c(-3, 3), cex=2)
points(D[(Ntilde/2 + 1):1000 ,1], D[(Ntilde/2 + 1):1000,2], pch=".", col="red", cex=2)
hist(D[,1], col="skyblue", breaks=20)
L
?rowMeans
plot(Db[[i]][1:(N/2),1], Db[[i]][1:(N/2),2], pch=".", col="blue",
xlim=c(-5, 5), ylim=c(-3, 3), cex=2)
points(Db[[i]][(N/2 + 1):N ,1], D[[i]][(N/2 + 1):N,2], pch=".", col="red", cex=2)
mu1 = -1.6
mu2 = 1.6
genData = function(N=1000) {
x1s = matrix(c(rnorm(N/2, mu1), rnorm(N/2)), nrow=N/2)
x2s = matrix(c(rnorm(N/2, mu2), rnorm(N/2)), nrow=N/2)
xs = rbind(x1s, x2s)
ys = c(rep(-1, N/2), rep(1, N/2))
return(cbind(xs, ys))
}
B = 30
N=100
Db = list()
for(b in 1:B) {
Db = c(Db, list(genData(N)))
}
i=1
plot(Db[[i]][1:(N/2),1], Db[[i]][1:(N/2),2], pch=".", col="blue",
xlim=c(-5, 5), ylim=c(-3, 3), cex=2)
points(Db[[i]][(N/2 + 1):N ,1], D[[i]][(N/2 + 1):N,2], pch=".", col="red", cex=2)
length(Db)
dim(Db[[1]])
(N/2 + 1):N
Db[[1]][(N/2 + 1):N,]
Db[[1]][(N/2 + 1):N,1]
Db[[1]][(N/2 + 1):N,2]
i=1
plot(Db[[i]][1:(N/2),1], Db[[i]][1:(N/2),2], pch=".", col="blue",
xlim=c(-5, 5), ylim=c(-3, 3), cex=2)
points(Db[[i]][(N/2 + 1):N ,1], D[[i]][(N/2 + 1):N,2], pch=".", col="red", cex=2)
plot(Db[[i]][1:(N/2),1], Db[[i]][1:(N/2),2], pch=".", col="blue",
xlim=c(-5, 5), ylim=c(-3, 3), cex=2)
points(Db[[i]][(N/2 + 1):N ,1], Db[[i]][(N/2 + 1):N,2], pch=".", col="red", cex=2)
i=2
plot(Db[[i]][1:(N/2),1], Db[[i]][1:(N/2),2], pch=".", col="blue",
xlim=c(-5, 5), ylim=c(-3, 3), cex=2)
points(Db[[i]][(N/2 + 1):N ,1], Db[[i]][(N/2 + 1):N,2], pch=".", col="red", cex=2)
i=3
plot(Db[[i]][1:(N/2),1], Db[[i]][1:(N/2),2], pch=".", col="blue",
xlim=c(-5, 5), ylim=c(-3, 3), cex=2)
points(Db[[i]][(N/2 + 1):N ,1], Db[[i]][(N/2 + 1):N,2], pch=".", col="red", cex=2)
2/(1 - .3348)^2 + 2/(.62 * .3348 * (1 - .3348)^2) - .3348/.62 * 1/(1 - .3348)
2 * .3348/(1 - .3348)/(1 - .3348) + (2 * .3348/(.62 (1 - .3348))/(1 - .3348) - .3348/.62 * (1/(1 - .4438))
)
2 * .3348/(1 - .3348)/(1 - .3348) + 2 * .3348/(.62 * (1 - .3348))/(1 - .3348) - .3348/.62 * (1/(1 - .4438))
2 * .3348/(1 - .3348)^2 + 2 \cdot .3348}{.62 (1 - .3348)^2} - \frac{.3348}{.62}\frac{1}{1 - .3348}
2 * .3348/(1 - .3348)^2 + 2 * .3348/(.62 *(1 - .3348)^2) - .3348/.62 /(1 - .3348)
2 * .3348/(1 - .3348)/(1 - .3348) + 2 * .3348/(.62 * (1 - .3348))/(1 - .3348) - .3348/.62 * (1/(1 - .3438))
2 * .3348/(1 - .3348)^2 + 2 * .3348/(.62 *(1 - .3348)^2) - .3348/.62 /(1 - .3348)
.3*.8
.3*.8 + .7*.2
.4 * .8 + .6 * .2
?integrate
source('~/Google Drive/UW/coursework/2015_FALL/stat_512/hw4/hw4.r')
source('~/Google Drive/UW/coursework/2015_FALL/stat_512/hw4/hw4.r')
source('~/Google Drive/UW/coursework/2015_FALL/stat_512/hw4/hw4.r')
integrate(fms2, -Inf, 0)
debugSource('~/Google Drive/UW/coursework/2015_FALL/stat_512/hw4/hw4.r')
integrate(fms2, -Inf, 0)
f(0)
f(0)
debugSource('~/Google Drive/UW/coursework/2015_FALL/stat_512/hw4/hw4.r')
integrate(fms2, -Inf, 0)
f(0)
tmp = f(0)
source('~/Google Drive/UW/coursework/2015_FALL/stat_512/hw4/hw4.r')
integrate(fms2, -Inf, 0)
debugSource('~/Google Drive/UW/coursework/2015_FALL/stat_512/hw4/hw4.r')
integrate(fms2, -Inf, 0)
f(0)
integrate(fms2, -Inf, 0)
ls()
sigma
a
b
mu
tmp = integrate(f, a, b)
tmp
f(0)
fms2(0)
integrate(f, a, b)$value
fms2(0)
fms2(c(0,1)
)
source('~/Google Drive/UW/coursework/2015_FALL/stat_512/hw4/hw4.r')
fms2(0)
source('~/Google Drive/UW/coursework/2015_FALL/stat_512/hw4/hw4.r')
fms2(0)
fms2(c(0,1))
integrate(fms2, -Inf, 0)
b = 2.7897
pnorm(b - mu) - pnorm(a - mu)
a = 0
b = 2.7897
sigma = 1
mu = 0
pnorm(b - mu) - pnorm(a - mu)
x = 0.02367412
integrate(fms2, 0, Inf)
integrate(fms2, 0, 5)
integrate(fms2, 0, 1)
integrate(fms2, 0, .3)
integrate(fms2, 3, Inf)
integrate(fms2, 2, Inf)
integrate(fms2, 2.5, Inf)
integrate(fms2, 2.8, Inf)
integrate(fms2, 2.6, Inf)
integrate(fms2, 2.7, Inf)
integrate(fms2, 2.65, Inf)
integrate(fms2, 2.68, Inf)
integrate(fms2, 2.7, Inf)
integrate(fms2, 2.75, Inf)
integrate(fms2, 2.76, Inf)
integrate(fms2, 2.755, Inf)
source('~/Google Drive/UW/coursework/2015_FALL/stat_512/hw4/hw4.r')
source('~/Google Drive/UW/coursework/2015_FALL/stat_512/hw4/hw4.r')
?c
?abind
install.package("abing")
install.package("abind")
install.packages("abind")
library("abind", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
?abind
source('~/git/M9/loadTestData.r')
test = loadDeformations()
out$mx
test$mx
test$my
test$mt
test$xlower
test$ylower
test$t0
test$dx
test$dy
test$dt
gridTest = make.surface.grid(list(x=1:211, y=1:601))
quilt.plot(gridTest, test$dat[,,6])
quilt.plot(gridTest, test$dat[,,1])
quilt.plot(gridTest, test$dat[,,2])
quilt.plot(gridTest, test$dat[,,3])
quilt.plot(gridTest, test$dat[,,4])
quilt.plot(gridTest, test$dat[,,5])
quilt.plot(gridTest, test$dat[,,6])
quilt.plot(gridTest, test$dat[,,7])
source('~/git/M9/loadTestData.r')
test = loadDeformations()
quilt.plot(gridTest, test$dat[,,1])
quilt.plot(gridTest, test$dat[,,2])
quilt.plot(gridTest, test$dat[,,3])
quilt.plot(gridTest, test$dat[,,4])
quilt.plot(gridTest, test$dat[,,5])
quilt.plot(gridTest, test$dat[,,6])
?svd
defDat = loadDeformations()
dat = matrix(nrow=dim(defDat)[3], ncol=dim(defDat)[1]*dim(defDat)[2])
for(i in 1:dim(defDat[3])) {
dat[i,] = c(defDat$dat[,,i])
}
#generate covariance matrix
covMat = dat %*% t(dat)
out = svd(covMat)
dim(defDat)
length(defDat)
dat = matrix(nrow=dim(defDat$dat)[3], ncol=dim(defDat$dat)[1]*dim(defDat$dat)[2])
for(i in 1:dim(defDat$dat[3])) {
dat[i,] = c(defDat$dat[,,i])
}
#generate covariance matrix
covMat = dat %*% t(dat)
out = svd(covMat)
for(i in 1:dim(defDat$dat)[3]) {
dat[i,] = c(defDat$dat[,,i])
}
covMat = dat %*% t(dat)
out = svd(covMat)
covMat
names(ot)
names(out)
dim(out$d)
dim(out$u)
dim(out$v)
out$d
plot(1:length(out$d), out$d, pch=19, col="blue",
main="Deformation Data Singular Values", xlab="", ylab="Singular Value")
grid = make.surface.grid(list(x=1:dim(defDat$dat)[1], y=1:dim(defDat$dat)[2])
names(out)
names(out)
D = diag(out$d)
grid = make.surface.grid(list(x=1:dim(defDat$dat)[1], y=1:dim(defDat$dat)[2]))
Di = matrix(0, nrow=nrow(D), ncol=ncol(D))
D1[1,1] = D[1,1]
D = diag(out$d)
D1 = matrix(0, nrow=nrow(D), ncol=ncol(D))
D1[1,1] = D[1,1]
defEst = out$u %*% D1 %*% out$v
quilt.plot(grid, c(defEst), main="ith Singular Value Approximation")
length(grid)
length(defEst)
vgram
# test emulator on small testing dataset from M9 project SageMathCloud page
source('~/git/M9/loadTestData.r')
dim(allHMax)
allDef = loadDeformations()
dim(allDef)
length(allDef)
dim(allDef[[1]])
dim(allDef[[2]])
length(allDef[[2]])
allDef[[2]]
names(allDef)
211*601*8/20^30
211*601*8/2^30
211*601*8
(211*601)^2*8/2^30
126811^2*8/2^30
?rank
library(rARPACK)
?svds
print.matrix <- function(m){
str = write.table(format(m, justify="right"),
row.names=F, col.names=F, quote=F)
paste(str, collapse=",")
}
print(matrix(1:5))
?write.table
print.matrix <- function(m){
str = write.table(format(m, justify="right"),
row.names=F, col.names=F, quote=F)
#  paste(str, collapse=",")
}
print(matrix(1:5))
out = print(matrix(1:5))
out
typeof(out)
print.matrix <- function(m){
write.table(format(m, justify="right"),
row.names=F, col.names=F, quote=F)
#  paste(str, collapse=",")
}
out = print(matrix(1:5))
out
typeof(out)
print.matrix <- function(m){
print("c(")
write.table(format(m, justify="right"), sep=", ",
row.names=F, col.names=F, quote=F)
print(")")
#  paste(str, collapse=",")
}
out = print(matrix(1:5))
?paste
print.matrix <- function(m){
paste0("c(", paste(as.character(m), sep=", "), ")")
#   write.table(format(m, justify="right"), sep=", ",
#               row.names=F, col.names=F, quote=F)
#  paste(str, collapse=",")
}
print(matrix(1:5))
paste0(1:5)
print.matrix <- function(m){
str = c("c(", paste(as.character(m), sep=", "), ")")
write.table(format(str, justify="right"), sep=", ",
row.names=F, col.names=F, quote=F)
#  paste(str, collapse=",")
}
print(matrix(1:5))
print.matrix <- function(m){
str = c("c(", paste(as.character(m), sep=", "), ")")
write.table(format(str, justify="right"), eol=", ",
row.names=F, col.names=F, quote=F)
#  paste(str, collapse=",")
}
print(matrix(1:5))
?character
character(1:5)
as.character(1:5)
as.character(1:5, length=1)
paste(1:5)
out = paste(1:5)
out
out[1]
out[2]
print.matrix <- function(m){
paste0(c("c(", paste(as.character(m), collapse=", "), ")"), collapste="")
#   write.table(format(str, justify="right"), eol=", ",
#               row.names=F, col.names=F, quote=F)
#  paste(str, collapse=",")
}
print(matrix(1:5))
print.matrix <- function(m){
paste0(c("c(", paste(as.character(m), collapse=", "), ")"), collapse="")
#   write.table(format(str, justify="right"), eol=", ",
#               row.names=F, col.names=F, quote=F)
#  paste(str, collapse=",")
}
print(matrix(1:5))
print.matrix <- function(m){
paste0(c("c(", paste(as.character(m), collapse=", "), ")"), collapse="")
}
d=c(2085.71140299254, 673.861496071614, 285.402204319804, 225.432777612118, 58.8396258525062, 18.8457821058001, 8.97236441261358, 8.34205822659968, 5.23887310020639, 2.74355389351251, 2.22494702470127, 1.68001068382452, 0.759383777152277, 0.500762007444273, 0.304815351334974, 0.295417729946848, 0.267286913512525, 2.17270762958733e-05, 4.83741629346752e-06)
d
plot(d)
plot(d^2)
plot(cumsum(d^2)/sum(d^2))
plot(cumsum(d^2)/sum(d^2), xlab="Principal Component", ylab="Variance Explained (Fraction)", main="Cumulative Fraction of Variance Explained", pch=19, col="blue")
cumsum(d^2)/sum(d^2)
dim(dat)
mat = matrix(runif(10*20), nrow=10)
mat
covMat = t(mat) %*% mat * (1/10)
dim(mat)
out = svd(covMat)
print(out$d)
dim(dat)
library(RcppCNPy)
library(fields)
library(abind)
setwd("~/git/M9/test_data")
out = loadAllDeformations()
#Functions for loading topography data
loadTopo = function(fname) {
dat = scan(fname, what="character")
#get header information
mx = as.numeric(dat[1])
my = as.numeric(dat[3])
mt = as.numeric(dat[5])
xlower = as.numeric(dat[7])
ylower = as.numeric(dat[9])
t0 = as.numeric(dat[11])
dx = as.numeric(dat[13])
dy = as.numeric(dat[15])
dt = as.numeric(dat[17])
#get topography/bathmetry/deformation data
dat = array(as.numeric(dat[19:length(dat)]), dim=c(mx, my, mt))
out = list(dat=dat, mx=mx,my=my,mt=mt,xlower=xlower,ylower=ylower,
t0=t0,dx=dx,dy=dy,dt=dt)
return(out)
}
#CSZa: CSZR_XXL1.tt3
#CSZb: CSZR_XL1.tt3
#CSZc: CSZR_L1.tt3
#CSZd: CSZR_M1.tt3
#CSZe: CSZR_SM1.tt3
#CSZf: CSZ_SS3_Defm_FINAL.tt3
loadDeformations = function() {
wd = getwd()
setwd("~/git/M9/CSZR")
#topography data files
files = c("CSZR_XXL1.tt3", "CSZR_XL1.tt3", "CSZR_L1.tt3",
"CSZR_M1.tt3", "CSZR_SM1.tt3", "CSZ_SS3_Defm_FINAL.tt3")
#NOTE: CSZ_SS3_Defm_FINAL.tt3 has slightly different dx, dy, dt.
#Instead of 0.0166, 0.0166, and 0.5, it's 0.0167, 0.0167, and 1
#respectively
for(f in 1:length(files)) {
if(f == 1) {
out = loadTopo(files[f])
out$dat = out$dat[,,out$mt]
}
else {
#concatenate data in out list:
tmp = loadTopo(files[f])
out$dat = abind(out$dat, tmp$dat[,,tmp$mt], along=3)
out$mx = c(out$mx, tmp$mx)
out$my = c(out$my, tmp$my)
out$mt = c(out$mt, tmp$mt)
out$xlower = c(out$xlower, tmp$xlower)
out$ylower = c(out$ylower, tmp$ylower)
out$t0 = c(out$t0, tmp$t0)
out$dx = c(out$dx, tmp$dx)
out$dy = c(out$dy, tmp$dy)
out$dt = c(out$dt, tmp$dt)
}
}
#set wd back to what it was before
setwd(wd)
return(out)
}
loadAllDeformations = function() {
wd = getwd()
setwd("~/git/M9/CSZR")
#topography data files
files = system("ls *.tt3", intern=TRUE)
#NOTE: CSZ_SS3_Defm_FINAL.tt3 has slightly different dx, dy, dt.
#Instead of 0.0166, 0.0166, and 0.5, it's 0.0167, 0.0167, and 1
#respectively
for(f in 1:length(files)) {
if(f == 1) {
out = loadTopo(files[f])
out$dat = out$dat[,,out$mt]
}
else {
#concatenate data in out list:
tmp = loadTopo(files[f])
out$dat = abind(out$dat, tmp$dat[,,tmp$mt], along=3)
out$mx = c(out$mx, tmp$mx)
out$my = c(out$my, tmp$my)
out$mt = c(out$mt, tmp$mt)
out$xlower = c(out$xlower, tmp$xlower)
out$ylower = c(out$ylower, tmp$ylower)
out$t0 = c(out$t0, tmp$t0)
out$dx = c(out$dx, tmp$dx)
out$dy = c(out$dy, tmp$dy)
out$dt = c(out$dt, tmp$dt)
}
}
#set wd back to what it was before
setwd(wd)
return(out)
}
out = loadAllDeformations()
dat = matrix(nrow=dim(defDat$dat)[3], ncol=dim(defDat$dat)[1]*dim(defDat$dat)[2])
for(i in 1:dim(defDat$dat)[3]) {
dat[i,] = c(defDat$dat[,,i])
}
defDat = out
dat = matrix(nrow=dim(defDat$dat)[3], ncol=dim(defDat$dat)[1]*dim(defDat$dat)[2])
for(i in 1:dim(defDat$dat)[3]) {
dat[i,] = c(defDat$dat[,,i])
}
dim(dat)
truncation = 5
out = svds(dat, v=truncation, nu=0, nv=truncation)
truncation = 5
out = svds(dat, k=truncation)
names(out)
dim(out$d)
dim(out$u)
dim(out$v)
